(ns schema
  (:require [specomatic.field-def :as-alias sf]
            [specomatic.spec :as sp]))

(def potato-schema
  "A schema containing a potato entity type"
  {::potato {:field-defs
               {:potato/id {:kind ::sf/simple, :dispatch ::sp/integer},
                :potato/variety {:kind ::sf/simple,
                                 :dispatch #{:agata :charlotte :desiree
                                             :jazzy}},
                :potato/weight {:kind ::sf/simple, :dispatch ::sp/integer}},
             :required-fields #{}}})

(def tomato-schema
  "A schema containing a tomato entity type"
  {::tomato {:field-defs
               {:tomato/serial-number {:kind ::sf/simple,
                                       :dispatch ::sp/integer},
                :tomato/variety {:kind ::sf/simple,
                                 :dispatch #{:hillbilly :marmande :moneymaker}},
                :tomato/weight {:kind ::sf/simple, :dispatch ::sp/integer}},
             :id-field :tomato/serial-number,
             :required-fields #{}}})

(def cinema-schema
  "A schema containing actor, director, movie, review and user entity types"
  {::movie {:field-defs
              #:movie{:id {:kind ::sf/simple, :dispatch ::sp/integer},
               :title {:kind ::sf/simple, :dispatch 'string?},
               :release-year {:kind ::sf/simple, :dispatch 'integer?},
               :actors {:kind ::sf/reference-coll, :target ::actor},
               :directors {:kind ::sf/reference-coll,
                                  :target ::director}},
            :required-fields #{:movie/title :movie/release-year}},
   ::director {:field-defs
                 #:director{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                  :name {:kind ::sf/simple, :dispatch 'string?}},
               :required-fields #{:director/name}},
   ::actor {:field-defs #:actor{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                         :name {:kind ::sf/simple, :dispatch 'string?}},
            :required-fields #{:actor/name}},
   ::review {:field-defs
               #:review{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                :title {:kind ::sf/simple, :dispatch 'string?},
                :movie {:kind ::sf/reference, :target ::movie}},
             :required-fields #{:review/title :review/movie}},
   ::user {:field-defs #:user{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                        :username {:kind ::sf/simple, :dispatch 'string?},
                        :director {:kind ::sf/reference,
                                         :target ::director}},
           :required-fields #{:user/username}}})

(def cinema-schema-overrides
  "A partial schema to override the reference type of the inverse field to :user/director.
  This has the effect of making director -> user a 1:1 relation (instead of the default, 1:n)"
  {::director {:field-defs #:director{:user {:inverse-of :user/director,
                                             :kind ::sf/reference}}}})

(def full-cinema-schema
  "The full schema generated by `specomatic.core/full-schema` from the cinema-schema."
  {::movie {:field-defs #:movie{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                         :title {:kind ::sf/simple, :dispatch 'string?},
                         :release-year {:kind ::sf/simple,
                                               :dispatch 'integer?},
                         :actors {:kind ::sf/reference-coll,
                                         :target :schema/actor,
                                         :reference-type :has-many-through},
                         :directors {:kind ::sf/reference-coll,
                                            :target :schema/director,
                                            :reference-type :has-many-through},
                         :reviews {:inverse-of :review/movie,
                                          :kind ::sf/reference-coll,
                                          :reference-type :has-many,
                                          :target :schema/review,
                                          :via :review/movie}},
            :required-fields #{:movie/release-year :movie/title},
            :id-field :movie/id},
   ::director {:field-defs
                 #:director{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                  :name {:kind ::sf/simple, :dispatch 'string?},
                  :user {:inverse-of :user/director,
                                   :kind ::sf/reference,
                                   :target :schema/user,
                                   :reference-type :has-one,
                                   :via :user/director},
                  :movies {:inverse-of :movie/directors,
                                     :kind ::sf/reference-coll,
                                     :reference-type :has-many-through,
                                     :target :schema/movie}},
               :required-fields #{:director/name},
               :id-field :director/id,
               :display-name-fields #{:director/name}},
   ::actor {:field-defs #:actor{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                         :name {:kind ::sf/simple, :dispatch 'string?},
                         :movies {:inverse-of :movie/actors,
                                         :kind ::sf/reference-coll,
                                         :reference-type :has-many-through,
                                         :target :schema/movie}},
            :required-fields #{:actor/name},
            :id-field :actor/id,
            :display-name-fields #{:actor/name}},
   ::review {:field-defs
               #:review{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                :title {:kind ::sf/simple, :dispatch 'string?},
                :movie {:kind ::sf/reference,
                                :target :schema/movie,
                                :reference-type :has-one}},
             :required-fields #{:review/movie :review/title},
             :id-field :review/id},
   ::user {:field-defs #:user{:id {:kind ::sf/simple, :dispatch ::sp/integer},
                        :username {:kind ::sf/simple, :dispatch 'string?},
                        :director {:kind ::sf/reference,
                                         :target :schema/director,
                                         :reference-type :has-one}},
           :required-fields #{:user/username},
           :id-field :user/id}})
